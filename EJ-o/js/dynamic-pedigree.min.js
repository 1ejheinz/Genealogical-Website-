//! dynamic-pedigree.js - Copyright (c) 2024 John Cardinal
'use strict'
const ss_search_data=new SSSearchData()
const dpCss={refocusButtonClass:'gs-dpr',eolButtonClass:'gs-dpre',boxClass:'gs-c-box',boxSubjectClass:'gs-c-subject',boxFemaleClass:'gs-c-gf',boxMaleClass:'gs-c-gm',ctlb:'gs-c-ctlb',ct:'gs-c-ct',}
function DP_Controller(options){this.options=options
ss_search_data.oOptions={groupPrefix:options.groupPrefix,filetype:options.filetype}
this.popped=false
this.model=null
this.view=null
this.state=null
const controller=this
$(window).bind('popstate',function(e){controller.popped=true
if(e.originalEvent.state){controller.initializeChart(e.originalEvent.state)}
else{const newState=controller.getStateFromHRef(window.location.href)
controller.initializeChart(newState)}
controller.popped=false})
$('#generations').on('change',function(){const newState={personId:controller.model.baseId,generations:Number(this.value)}
if(controller.updateState(newState)){controller.initializeChart(newState)}})
$('#dp').on('click','.'+dpCss.refocusButtonClass,function(){const personId=this.id.substr(3)
controller.refocus({personId:personId,generations:controller.state.generations})
return false})
$('#dp').on('click','.gs-dpl a',function(){const personId=this.id.substr(3)
controller.refocus({personId:personId,generations:controller.state.generations})
return false})
this.initializeChart(this.getStateFromHRef(window.location.href))}
DP_Controller.prototype.getStateFromHRef=function(href){const personId=this.getParameterFromUrl(href,'p',this.options.initialSubject||-1)
let generations=this.getParameterFromUrl(href,'g',this.options.generations)
generations=Math.floor(Number(generations))||3
if(generations>6)generations=6
return{personId:personId,generations:generations}}
DP_Controller.prototype.getParameterFromUrl=function(href,param,def){const re=new RegExp('(?:\\?'+param+'=|&'+param+'=)([0-9,]+)')
const result=href.match(re)
if(result){return result[1]}
return def}
DP_Controller.prototype.initializeChart=function(newState){ss_search_data.oOptions.surnameFirst=false
this.initializeModel(newState.personId,newState.generations)
this.initializeView(this.model,newState.generations)
this.updateState(newState)
$('#generations').val(newState.generations)}
DP_Controller.prototype.initializeModel=function(personId,generations){this.model=new DP_Model(personId,generations)}
DP_Controller.prototype.initializeView=function(model,generations){this.view=new DP_View(model,this.options,generations)
this.view.hide()
this.view.setLocations()
this.view.addConnectors()
this.view.addBoxes()
this.view.updateAll()
this.view.show()}
DP_Controller.prototype.refocus=function(newState){if(this.updateState(newState)){this.model.refocus(newState.personId)
this.view.updateAll()}}
DP_Controller.prototype.updateState=function(newState){if(this.state==null||(this.state.personId!==newState.personId||this.state.generations!==newState.generations)){const href=window.location.href.replace(/[?#].*/,'')
if(!this.popped&&this.state){history.pushState(newState,'p#'+newState.personId,href+'?p='+newState.personId+'&g='+newState.generations)}
this.state=newState
return true}
return false}
function DP_Model(baseId,generations){this.baseId=baseId
this.generations=generations
if(baseId==-1){baseId=this.getFirstPersonId()}
this.refocus(baseId)}
DP_Model.prototype.add=function(ahn,id,generation){if(generation<=this.generations){const person=ss_search_data.people[id]
if(person){this.tree[ahn]=id
if(person.f){this.add(ahn*2,person.f,generation+1)}
if(person.m){this.add((ahn*2)+1,person.m,generation+1)}}}}
DP_Model.prototype.getCurrentPerson=function(index){if(index>=this.tree.length)return null
return ss_search_data.people[this.tree[index]]}
DP_Model.prototype.getFirstPersonId=function(){for(let id in ss_search_data.people){return id}
return-1}
DP_Model.prototype.refocus=function(personId){this.baseId=personId
this.tree=[]
this.add(1,personId,0)}
function DP_View(model,options,generations){this.model=model
this.generations=generations
this.boxes=[]
this.boxHeight=options.boxHeight||36
this.boxWidth=options.boxWidth||190
this.colPadding=12
this.rowPadding=8
this.labelChildren=options.labelChildren||'Partners &amp; Children'
this.labelSiblings=options.labelSiblings||'Siblings'
this.useInitials=options.useInitials||false
this.add(1,0)}
DP_View.prototype.add=function(ahn,generation){if(generation<=this.generations){this.boxes[ahn]=new DP_Box(ahn,generation)
this.add(ahn*2,generation+1)
this.add((ahn*2)+1,generation+1)}}
DP_View.prototype.addBoxes=function(){const cf=$('#dp')
for(let i=1;i<this.boxes.length;i++){const box=this.boxes[i]
let cssClass=dpCss.boxClass+' '
if(i===1){cssClass+=dpCss.boxSubjectClass}
else{cssClass+=box.getClass()}
let html='<div id="dp'+box.ahn+'" class="'+cssClass+'"'
html+=' style="left:'+box.x+'px;top:'+box.y+'px;'
html+='height:'+box.height+'px;width:'+box.width+'px;">'
html+='</div>'
cf.append(html)}
this.setFrameSize(cf)
this.addChildrenList(cf)
this.addSiblingList(cf)
cf.show()}
DP_View.prototype.addChildrenList=function(cf){const box=this.boxes[1]
const top=box.y+this.boxHeight+this.rowPadding
const height=Math.min(this.height-(top+(this.rowPadding*2)),300)
let html='<ul class="gs-dpl" id="dplc" style="'
html+='top:'+top+'px;'
html+='left:'+box.x+'px;'
html+='height:'+height+'px;'
html+='width:'+this.boxWidth+'px;'
html+='"></ul>'
cf.prepend(html)}
DP_View.prototype.addConnectors=function(){const cf=$('#dp')
const halfHeight=Math.floor(this.boxHeight/2)
const halfGap=Math.floor(this.colPadding/2)
for(let i=1;i<this.boxes.length;i++){const box=this.boxes[i]
let width=halfGap
if(box.generation===this.generations-2){width=this.boxWidth+this.colPadding}
if(box.generation<this.generations){const fatherBox=this.boxes[box.getFatherIndex()]
const top=fatherBox.y+halfHeight
const bottom=this.boxes[box.getMotherIndex()].y+halfHeight
const height=bottom-top
const left=fatherBox.x-halfGap
let html='<div class="'+dpCss.ctlb+'"'
html+=' style="left:'+left+'px;top:'+top+'px;'
html+='height:'+height+'px;width:'+width+'px;"></div>'
cf.append(html)}
if(box.ahn==1){const top=box.y+halfHeight
const left=box.x+this.boxWidth
let html='<div class="'+dpCss.ct+'"'
html+=' style="left:'+left+'px;top:'+top+'px;'
html+='height:1px;width:'+halfGap+'px;"></div>'
cf.append(html)}}}
DP_View.prototype.addSiblingList=function(cf){const box=this.boxes[1]
const height=Math.min(box.y-(this.rowPadding*2),300)
const top=box.y-(height+this.rowPadding)
let html='<ul class="gs-dpl" id="dpls" style="'
html+='top:'+top+'px;'
html+='left:'+box.x+'px;'
html+='height:'+height+'px;'
html+='width:'+this.boxWidth+'px;'
html+='"></ul>'
cf.prepend(html)}
DP_View.prototype.getContent=function(person,ahn){if(person){let content='<div style="height:100%;overflow:hidden;">'
content+=ss_search_data.getPersonLink(person,0,this.useInitials)
const lifespan=ss_search_data.getLifespan(person)
if(lifespan!==''){content+='<div>'+lifespan+'</div>'}
content+='</div>'
if(ahn!==1){let cssClass=dpCss.refocusButtonClass
if(!person.f&&!person.m){cssClass+=' '+dpCss.eolButtonClass}
content+='<a href="#" class="'+cssClass+'" id="dpr'+person.u[2]+'"></a>'}
return content}
else{return''}}
DP_View.prototype.hide=function(){$('#dp').hide().empty()}
DP_View.prototype.setColumns=function(){this.columns=[]
let offset=this.colPadding
this.columns.push(offset)
for(let column=1;column<=this.generations;column++){if(column===1||column===this.generations){offset+=(this.boxWidth+this.colPadding)}
else{offset+=Math.floor(this.boxWidth*0.4)}
this.columns.push(offset)}}
DP_View.prototype.setFrameSize=function(cf){const box=this.boxes[this.boxes.length-1]
this.width=box.x+this.boxWidth+this.colPadding
this.height=box.y+this.boxHeight+this.rowPadding
cf.css('height',this.height+'px').css('width',this.width+'px')}
DP_View.prototype.setGenerationLocations=function(generation){let y=this.rowPadding
for(let i=1;i<this.boxes.length;i++){const box=this.boxes[i]
if(box.generation===generation){box.x=this.columns[generation]
if(generation!==this.generations){const fatherTop=this.boxes[box.getFatherIndex()].y
const motherBottom=this.boxes[box.getMotherIndex()].y+this.boxHeight
box.y=fatherTop+
Math.floor((motherBottom-fatherTop)/2)-
Math.floor(this.boxHeight/2)
box.height=this.boxHeight
box.width=this.boxWidth}
else{box.y=y
box.height=this.boxHeight
box.width=this.boxWidth
y+=(this.boxHeight+this.rowPadding)}}}}
DP_View.prototype.setLocations=function(){this.setColumns()
for(let i=this.generations;i>=0;i--){this.setGenerationLocations(i)}}
DP_View.prototype.show=function(){$('#dp').show()}
DP_View.prototype.sortPeople=function(listOfPeople){listOfPeople.sort(function(p1,p2){if(p1.u[3]&&p2.u[3]){return p2.u[3]-p1.u[3]}
if(p1.u[3])return 1
if(p2.u[3])return-1
return 0})}
DP_View.prototype.updateAll=function(){this.updateBoxes()
this.updateSiblings()
this.updateChildren()}
DP_View.prototype.updateBoxes=function(){for(let i=1;i<this.boxes.length;i++){const box=this.boxes[i]
const person=this.model.getCurrentPerson(i)
const content=this.getContent(person,i)
$('#dp'+box.ahn).html(content)
if(box.ahn!==1)this.setContainerGender(person,i)}}
DP_View.prototype.setContainerGender=function(person,ahn){const def=(ahn%2)===1?'f':'m'
const pg=person?person.g:def
const cntr=document.getElementById('dp'+ahn)
cntr.classList.remove('gs-c-gf','gs-c-gm')
cntr.classList.add('gs-c-g'+pg)}
DP_View.prototype.updateChildren=function(){let html=''
const parent=this.model.getCurrentPerson(1)
const parentId=parent.u[2]
const list=[]
const partners={}
const partnerIds=[]
for(let id in ss_search_data.people){const person=ss_search_data.people[id]
if(person.f===parentId||person.m===parentId){list.push(person)}}
this.sortPeople(list)
if(parent.s){for(let i=0;i<parent.s.length;i++){const partnerId=parent.s[i]
let partner=partners[partnerId]
if(!partner){partner={partnerId:partnerId,children:[]}
partnerIds.push(partnerId)}
partners[partnerId]=partner}}
for(let i=0,person;(person=list[i]);i++){let partnerId=-1
if(person.f&&person.f!==parentId){partnerId=person.f}
else if(person.m&&person.m!==parentId){partnerId=person.m}
let partner=partners[partnerId]
if(!partner){partner={partnerId:partnerId,children:[]}
partnerIds.push(partnerId)}
partner.children.push(person)
partners[partnerId]=partner}
for(let pIndex=0;pIndex<partnerIds.length;pIndex++){html+='<li>'
const partnerId=partnerIds[pIndex]
const partner=partners[partnerId]
if(partnerId>0){const person=ss_search_data.people[partnerId]
html+='<a href="#" id="dpl'+person.u[2]+'">'
html+=ss_search_data.getPersonName(person,0,this.useInitials)
html+='</a>'}
else{html+='?'}
if(partner.children.length>0){html+='<ul>'
for(let cIndex=0;cIndex<partner.children.length;cIndex++){const person=partner.children[cIndex]
html+='<li><a href="#" id="dpl'+person.u[2]+'">'
html+=ss_search_data.getPersonName(person,0,this.useInitials)
html+='</a></li>'}
html+='</ul>'}
html+='</li>'}
if(html!==''){html='<li class="gs-dplt">'+this.labelChildren+'</li>'+html}
$('#dplc').html(html)}
DP_View.prototype.updateSiblings=function(){let html=''
const subject=this.model.getCurrentPerson(1)
const fatherId=subject.f||0
const motherId=subject.m||0
const list=[]
for(const id in ss_search_data.people){const person=ss_search_data.people[id]
if(subject.u[2]==id)continue
if(person.f===fatherId||person.m===motherId){list.push(person)}}
this.sortPeople(list)
for(let i=0,person;(person=list[i]);i++){html+='<li><a href="#" id="dpl'+person.u[2]+'">'
html+=ss_search_data.getPersonName(person,0,this.useInitials)
html+='</a></li>'}
if(html!==''){html='<li class="gs-dplt">'+this.labelSiblings+'</li>'+html}
$('#dpls').html(html)}
function DP_Box(ahn,generation){this.ahn=ahn
this.generation=generation
this.x=0
this.y=0}
DP_Box.prototype.getClass=function(){return(this.ahn&-this.ahn)===1?dpCss.boxFemaleClass:dpCss.boxMaleClass}
DP_Box.prototype.getFatherIndex=function(){return Math.floor(this.ahn*2)}
DP_Box.prototype.getMotherIndex=function(){return Math.floor(this.ahn*2+1)}